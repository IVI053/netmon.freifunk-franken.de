<?php

// +---------------------------------------------------------------------------+
// index.php
// Netmon, Freifunk Netzverwaltung und Monitoring Software
//
// Copyright (c) 2009 Clemens John <clemens-john@gmx.de>
// +---------------------------------------------------------------------------+
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 3
// of the License, or any later version.
// +---------------------------------------------------------------------------+
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// +---------------------------------------------------------------------------+/

/**
 * This file contains the class for the dns stuff.
 *
 * @author	Clemens John <clemens-john@gmx.de>
 * @version	0.1
 * @package	Netmon Freifunk Netzverwaltung und Monitoring Software
 */

require_once($GLOBALS['monitor_root'].'lib/classes/core/ip.class.php');

class DNS {
	public function addHost($host, $ipv4_id, $ipv6_id, $user_id) {
		//Add new IPv4-Address
		if(!empty($ipv4_id) OR !empty($ipv6_id)) {
			if(!empty($host)) {
				$check_host = DNS::getHostByHostname($host);
				if(empty($check_host)) {
					try {
						DB::getInstance()->exec("INSERT INTO dns_hosts (user_id, host, ipv4_id, ipv6_id, create_date)
									VALUES ('$user_id', '$host', '$ipv4_id', '$ipv6_id', NOW());");
						$ip_id = DB::getInstance()->lastInsertId();
					}
					catch(PDOException $e) {
						echo $e->getMessage();
					}

					DNS::generateHostsFile();

					$message[] = array("Der Host $host wurde eingetragen.", 1);
					Message::setMessage($message);
					return true;
				} else {
					$message[] = array("Der Host $host konnte nicht eingetragen werden, da er bereits existiert.", 2);
					Message::setMessage($message);
					return false;
				}
			} else {
				$message[] = array("Der Host $host konnte nicht eingetragen werden, da er ungültig ist.", 2);
				Message::setMessage($message);
				return false;
			}
		} else {
			$message[] = array("Der Host $host konnte nicht eingetragen werden, da keine IP Adresse ausgewählt wurde.", 2);
			Message::setMessage($message);
			return false;
		}
	}

	public function deleteHost($host_id) {
		$host_data = DNS::getHostById($host_id);

		//Delete the router itself
		DB::getInstance()->exec("DELETE FROM dns_hosts WHERE id='$host_id';");

		$message[] = array("Der Host $host_data[host] wurde gelöscht.", 1);
		Message::setMessage($message);
		return true;
	}

	public function generateHostsFile() {
		$text = "#Hostfile generated by Netmon.\n#Do not make any changes here. They will be overwritten!\n\n";
		$hosts = DNS::getHosts();
		foreach($hosts as $host) {
			if($host['ipv4_id']!="0") {
				$ip = IP::getIpById($host['ipv4_id']);
				$text .= $ip['ip']."	".$host['host'].".".$GLOBALS['dns_tld']."\n";
			}

			if($host['ipv6_id']!="0") {
				$ip = IP::getIpById($host['ipv6_id']);
				$text .= $ip['ip']."	".$host['host'].".".$GLOBALS['dns_tld']."\n";
			}
		}

		$file = fopen($GLOBALS['dns_hosts_file_path'],"w+");
		fwrite($file, $text);
		fclose($file);
	}

	public function getHostByHostname($host) {
		try {
			$sql = "SELECT * FROM dns_hosts
				WHERE host='$host'";
			$result = DB::getInstance()->query($sql);
			$host = $result->fetch(PDO::FETCH_ASSOC);
		}
		catch(PDOException $e) {
			echo $e->getMessage();
		}
		return $host;
	}

	public function getHostById($host_id) {
		try {
			$sql = "SELECT * FROM dns_hosts
				WHERE id='$host_id'";
			$result = DB::getInstance()->query($sql);
			$host = $result->fetch(PDO::FETCH_ASSOC);
		}
		catch(PDOException $e) {
			echo $e->getMessage();
		}
		return $host;
	}

	public function getHosts() {
		try {
			$sql = "SELECT * FROM dns_hosts";
			$result = DB::getInstance()->query($sql);
			foreach($result as $key=>$row) {
				if($row['ipv4_id']!="0") {
					$row['ipv4_ip'] = IP::getIpById($row['ipv4_id']);
					$row['ipv4_ip'] = $row['ipv4_ip']['ip'];
				}
				
				if($row['ipv6_id']!="0") {
					$row['ipv6_ip'] = IP::getIpById($row['ipv6_id']);
					$row['ipv6_ip'] = $row['ipv6_ip']['ip'];
				}
				$hosts[] = $row;
			}
		}
		catch(PDOException $e) {
			echo $e->getMessage();
		}
		return $hosts;
	}
}
?>